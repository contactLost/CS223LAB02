
**************************************************************
*********************Two Bit Adder****************************
**************************************************************

module twoBitSim();

    logic A0,B0,A1,B1,C0;
    logic C0,S1,S2,Cout;
    
    twoBitAdder tba(A0,A1,B0,B1,C0,S1,S2,Cout);//C0 = cin

    initial begin
    
        A0=0;B0=0;A1=0;B1=0;C0=0;#5;
        A0=1;B0=0;A1=0;B1=0;C0=0;#5;
        A0=0;B0=1;A1=0;B1=0;C0=0;#5;
        A0=1;B0=1;A1=0;B1=0;C0=0;#5;
        A0=0;B0=0;A1=1;B1=0;C0=0;#5;
        A0=1;B0=0;A1=1;B1=0;C0=0;#5;
        A0=0;B0=1;A1=1;B1=0;C0=0;#5;
        A0=1;B0=1;A1=1;B1=0;C0=0;#5;
        A0=0;B0=0;A1=0;B1=1;C0=0;#5;
        A0=1;B0=0;A1=0;B1=1;C0=0;#5;
        A0=0;B0=1;A1=0;B1=1;C0=0;#5;
        A0=1;B0=1;A1=0;B1=1;C0=0;#5;
        A0=0;B0=0;A1=1;B1=1;C0=0;#5;
        A0=1;B0=0;A1=1;B1=1;C0=0;#5;
        A0=0;B0=1;A1=1;B1=1;C0=0;#5;
        A0=1;B0=1;A1=1;B1=1;C0=0;#5;
        A0=0;B0=0;A1=0;B1=0;C0=1;#5;
        A0=1;B0=0;A1=0;B1=0;C0=1;#5;
        A0=0;B0=1;A1=0;B1=0;C0=1;#5;
        A0=1;B0=1;A1=0;B1=0;C0=1;#5;
        A0=0;B0=0;A1=1;B1=0;C0=1;#5;
        A0=1;B0=0;A1=1;B1=0;C0=1;#5;
        A0=0;B0=1;A1=1;B1=0;C0=1;#5;
        A0=1;B0=1;A1=1;B1=0;C0=1;#5;
        A0=0;B0=0;A1=0;B1=1;C0=1;#5;
        A0=1;B0=0;A1=0;B1=1;C0=1;#5;
        A0=0;B0=1;A1=0;B1=1;C0=1;#5;
        A0=1;B0=1;A1=0;B1=1;C0=1;#5;
        A0=0;B0=0;A1=1;B1=1;C0=1;#5;
        A0=1;B0=0;A1=1;B1=1;C0=1;#5;
        A0=0;B0=1;A1=1;B1=1;C0=1;#5;
        A0=1;B0=1;A1=1;B1=1;C0=1;#5;   
    end
    
endmodule


module twoBitAdder(

    input logic A0,A1,B0,B1,C0,
    output logic S1,S2,Cout
    );
    
    wire W1;
    
    fullAdder adder1(A0,B0,C0,S1,W1);
    fullAdder adder2(A1,B1,W1,S2,Cout);
   
    
endmodule

**************************************************************
*************************Full Subtractor**********************
**************************************************************
module fullSubtractor(

    input logic 
    A,
    B,
    Bin,
    output 
    logic D,
    Bout
    );
    
    wire W1,W2,W3;
    
    halfSubtractor hlf1(A,B,W1,W2);
    
    halfSubtractor hlf2(W1,Bin,D,W3);

    or or1(Bout,W3,W2);
    
endmodule

module sim1( );
        
        logic A; 
        logic B;
        logic Bin;
        logic Bout, D;
        
        fullSubtractor full( A,B,Bin,Bout,D);
        
        initial begin
        
        A = 0; B = 0; Bin = 0; #10;
        A = 0; B = 0; Bin = 1; #10;
        A = 0; B = 1; Bin = 0; #10;
        A = 0; B = 1; Bin = 1; #10;
        A = 1; B = 0; Bin = 0; #10;
        A = 1; B = 0; Bin = 1; #10;
        A = 1; B = 1; Bin = 0; #10;
        A = 1; B = 1; Bin = 1; #10;
       
        end
endmodule

**************************************************************
*************************Full Adder***************************
**************************************************************

module fullAdder( x, y, cin, sum, cout);
    input logic x, y, cin;
    output logic sum, cout;
    wire s1, c1, c2;
    xor xor1(s1, x, y);
    xor xor2(sum, s1, cin);
    and and1(c1, x, y);
    and and2(c2, s1, cin);
    or or1(cout, c1, c2);
endmodule

module fullAdderSim();
    
    logic sum, cout;
    logic x, y, cin;
    fullAdder uut(x ,y ,cin ,sum ,cout);
    initial begin
        x=0;y=0;cin=0;#5;
        x=1;y=0;cin=0;#5;
        x=0;y=1;cin=0;#5;
        x=1;y=1;cin=0;#5;
        x=0;y=0;cin=1;#5;
        x=1;y=0;cin=1;#5;
        x=0;y=1;cin=1;#5;
        x=1;y=1;cin=1;#5;
        end
endmodule

**************************************************************
*********************Full Adder Behavioral********************
**************************************************************

module adder(x, y, cin, sum, cout);
    input logic x, y, cin;
    output logic sum, cout;
    
    assign sum = ~x & ~y & cin | ~x & y & ~cin | x & ~y & ~cin | x & y & cin ;
    assign cout = x & y | y & cin | x & cin ;
    
endmodule

module sim1();
    logic x, y, cin;
    logic sum, cout;
    adder uut(x ,y ,cin ,sum ,cout);
    initial begin
        x=0;y=0;cin=0;#5;
        x=1;y=0;cin=0;#5;
        x=0;y=1;cin=0;#5;
        x=1;y=1;cin=0;#5;
        x=0;y=0;cin=1;#5;
        x=1;y=0;cin=1;#5;
        x=0;y=1;cin=1;#5;
        x=1;y=1;cin=1;#5;
        end
endmodule


